Graph Creation

The lattice is created using an adjacency matrix, where each node will have as its neighbours the one that,
in a 2D spatial representation, is directly above, under or to its left or right, resulting in a square shaped
graph (usar imagem para explicar). Therefore, we need to check if we can create an edge to the node directly before
it, the one directly after, the two adjacent nodes on the same column but different rows all whilst maintaining a
square pattern. In other words, that if we have a node that represents one of the edges of the overall square, that
it does not connect to a node on the opposite edge.

The random graph is created by randomly generating either a 0 or a 1 for each possible link. If a 1 is generated,
the link is created. This leads to an average degree of N/2, where N is the total number of nodes.



Trust game:

In order to create a more diverse social setting in order to more accurately portray modern society, we used 8 different
kinds of personalities:

-A personality that, after starting with cooperation, always plays the same move as the opponent's last.

-A personality that always cheats.

-A personality that always cooperates.

-A personality that cooperates until cheated, after which this personality will always cheat.

-A personality that starts with a pattern and then proceeds to always cheat if it was never cheated or copy the last move if it was cheated.

-A personality that is the same as the first one, except it will only cheat if cheated twice or more times in a row.

-A personality that starts with cooperate, then keeps the same move if cooperated back and changes its move if cheated.

-A personality that always does a random move.

This not only dampens the spread of pure defectors but it also bears greater semblance to modern society.

We then spread these personalities evenly across all nodes in each of the graphs, and make each node play the trust game (falta explicar o que Ã© isto) with its neighbours.
After all nodes have played with all possible opponents, a generational evaluation is made, where all nodes pick a neighbour randomly and compare
each other's fitness using the function (1/(1+e^-(f_no-f_vizinho)) and then roll a probability from 0 to 100. If the rolled number divided by 100
is smaller than the fitness function's value, the node changes to its neighbour's strategy. After a new generation of nodes is created, the fitness
of each node is reset and a new round is played. After 10 rounds, a tournament is done. We then evaluate the number of nodes using each strategy and
the total number of cooperative actions out of the total number of actions in order to better evaluate the amount of positive strategies remaining.

BA model 1 (BAModel5000Nodesand4Averagedegree.txt)
Average Global Goodness: 54.986924
Final Results:
Strategy 0 average: 747
Strategy 1 average: 1409
Strategy 2 average: 171
Strategy 3 average: 708
Strategy 4 average: 442
Strategy 5 average: 389
Strategy 6 average: 676
Strategy 7 average: 455

BA model 2 (BAModel500.txt)
Average Global Goodness: 54.754502
Final Results:
Strategy 0 average: 1041
Strategy 1 average: 841
Strategy 2 average: 377
Strategy 3 average: 408
Strategy 4 average: 742
Strategy 5 average: 534
Strategy 6 average: 447
Strategy 7 average: 605

Lattice (lattice.txt)
Average Global Goodness: 27.727563
Final Results:
Strategy 0 average: 1399
Strategy 1 average: 2831
Strategy 2 average: 2
Strategy 3 average: 2
Strategy 4 average: 532
Strategy 5 average: 3
Strategy 6 average: 2
Strategy 7 average: 226


Random graph
Average Global Goodness: 18.730757
Final Results:
Strategy 0 average: 1400
Strategy 1 average: 3573
Strategy 2 average: 0
Strategy 3 average: 0
Strategy 4 average: 26
Strategy 5 average: 0
Strategy 6 average: 0
Strategy 7 average: 0


